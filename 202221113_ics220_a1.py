# -*- coding: utf-8 -*-
"""202221113_ICS220_A1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lHv6VPzaQNNEx8YyvOuaQimlPOwJQIBF
"""

"""Delivery Management System"""

from datetime import datetime
from enum import Enum

# ENUM Class for Delivery Status
class DeliveryStatus(Enum):
    ORDER_PLACED = "Order Placed"
    SHIPPED = "Shipped"
    ON_THE_WAY = "On The Way"
    DELIVERED = "Delivered"

# Class: Customer
class Customer:
    """Represents a customer placing a delivery order."""

    def __init__(self, customer_id, name, contact, email, delivery_address):
        self.__customer_id = customer_id
        self.__name = name
        self.__contact = contact
        self.__email = email
        self.__delivery_address = delivery_address

    # Getters and Setters
    def setCustomerId(self, customer_id):
        self.__customer_id = customer_id

    def getCustomerId(self):
        return self.__customer_id

    def setName(self, name):
        self.__name = name

    def getName(self):
        return self.__name

    def setContact(self, contact):
        self.__contact = contact

    def getContact(self):
        return self.__contact

    def setEmail(self, email):
        self.__email = email

    def getEmail(self):
        return self.__email

    def setDeliveryAddress(self, delivery_address):
        self.__delivery_address = delivery_address

    def getDeliveryAddress(self):
        return self.__delivery_address

    def displayCustomerInfo(self):
        """Displays customer details."""
        return f"Customer ID: {self.__customer_id}, Name: {self.__name}, Contact: {self.__contact}, Email: {self.__email}, Address: {self.__delivery_address}"

# Class: Order
class Order:
    """Represents an order placed by the customer."""

    def __init__(self, order_id, items, total_price, order_status, delivery_method):
        self.__order_id = order_id
        self.__items = items
        self.__total_price = total_price
        self.__order_status = order_status
        self.__delivery_method = delivery_method

    # Getters and Setters
    def setOrderId(self, order_id):
        self.__order_id = order_id

    def getOrderId(self):
        return self.__order_id

    def setItems(self, items):
        self.__items = items

    def getItems(self):
        return self.__items

    def setTotalPrice(self, total_price):
        self.__total_price = total_price

    def getTotalPrice(self):
        return self.__total_price

    def setOrderStatus(self, order_status):
        self.__order_status = order_status

    def getOrderStatus(self):
        return self.__order_status

    def setDeliveryMethod(self, delivery_method):
        self.__delivery_method = delivery_method

    def getDeliveryMethod(self):
        return self.__delivery_method

    def displayOrderInfo(self):
        """Displays order details."""
        return f"Order ID: {self.__order_id}, Items: {self.__items}, Total Price: {self.__total_price}, Status: {self.__order_status}, Delivery Method: {self.__delivery_method}"

# Class: PaymentDetails
class PaymentDetails:
    """Handles payment details related to an order."""

    def __init__(self, payment_id, payment_method, amount_paid, payment_status, discount_applied):
        self.__payment_id = payment_id
        self.__payment_method = payment_method
        self.__amount_paid = amount_paid
        self.__payment_status = payment_status
        self.__discount_applied = discount_applied

    # Getters and Setters
    def setPaymentId(self, payment_id):
        self.__payment_id = payment_id

    def getPaymentId(self):
        return self.__payment_id

    def setPaymentMethod(self, payment_method):
        self.__payment_method = payment_method

    def getPaymentMethod(self):
        return self.__payment_method

    def setAmountPaid(self, amount_paid):
        self.__amount_paid = amount_paid

    def getAmountPaid(self):
        return self.__amount_paid

    def setPaymentStatus(self, payment_status):
        self.__payment_status = payment_status

    def getPaymentStatus(self):
        return self.__payment_status

    def setDiscountApplied(self, discount_applied):
        self.__discount_applied = discount_applied

    def getDiscountApplied(self):
        return self.__discount_applied

    def displayPaymentInfo(self):
        """Displays payment details."""
        return f"Payment ID: {self.__payment_id}, Method: {self.__payment_method}, Amount Paid: {self.__amount_paid}, Status: {self.__payment_status}, Discount Applied: {self.__discount_applied}"

# Class: DeliveryInformation
class DeliveryInformation:
    """Stores delivery information for an order."""

    def __init__(self, delivery_number, reference_number, delivery_date, package_dimensions, total_weight, delivery_status):
        self.__delivery_number = delivery_number
        self.__reference_number = reference_number
        self.__delivery_date = delivery_date
        self.__package_dimensions = package_dimensions
        self.__total_weight = total_weight
        self.__delivery_status = delivery_status

    # Getters and Setters
    def setDeliveryNumber(self, delivery_number):
        self.__delivery_number = delivery_number

    def getDeliveryNumber(self):
        return self.__delivery_number

    def setReferenceNumber(self, reference_number):
        self.__reference_number = reference_number

    def getReferenceNumber(self):
        return self.__reference_number

    def setDeliveryDate(self, delivery_date):
        self.__delivery_date = delivery_date

    def getDeliveryDate(self):
        return self.__delivery_date

    def setPackageDimensions(self, package_dimensions):
        self.__package_dimensions = package_dimensions

    def getPackageDimensions(self):
        return self.__package_dimensions

    def setTotalWeight(self, total_weight):
        self.__total_weight = total_weight

    def getTotalWeight(self):
        return self.__total_weight

    def setDeliveryStatus(self, delivery_status):
        self.__delivery_status = delivery_status

    def getDeliveryStatus(self):
        return self.__delivery_status

    def displayDeliveryInfo(self):
        """Displays delivery details."""
        return f"Delivery Number: {self.__delivery_number}, Reference: {self.__reference_number}, Date: {self.__delivery_date}, Package: {self.__package_dimensions}, Weight: {self.__total_weight}, Status: {self.__delivery_status.value}"

# Class: Admin
class Admin:
    """Represents an admin who manages the system."""

    def __init__(self, admin_id, name, email, role, permissions):
        self.__admin_id = admin_id
        self.__name = name
        self.__email = email
        self.__role = role
        self.__permissions = permissions

    # Getters and Setters
    def setAdminId(self, admin_id):
        self.__admin_id = admin_id

    def getAdminId(self):
        return self.__admin_id

    def setName(self, name):
        self.__name = name

    def getName(self):
        return self.__name

    def setEmail(self, email):
        self.__email = email

    def getEmail(self):
        return self.__email

    def setRole(self, role):
        self.__role = role

    def getRole(self):
        return self.__role

    def setPermissions(self, permissions):
        self.__permissions = permissions

    def getPermissions(self):
        return self.__permissions

    def displayAdminInfo(self):
        """Displays admin details."""
        return f"Admin ID: {self.__admin_id}, Name: {self.__name}, Email: {self.__email}, Role: {self.__role}, Permissions: {self.__permissions}"

# Creating two Customer objects
customer1 = Customer("CUST001", "Ahmed Alremeithi", "0501234567", "202221113@zu.ac.ae", "Abu Dhabi, UAE")
customer2 = Customer("CUST002", "Thani Alremeithi", "0507654321", "202221114@zu.ac.ae", "Dubai, UAE")

# Creating two Order objects
order1 = Order("ORD001", "Wireless Keyboard, Laptop Cooling Pad", 220.00, "Confirmed", "Courier")
order2 = Order("ORD002", "Camera Lock, Wireless Mouse & Pad Set", 90.00, "Pending", "Courier")

# Creating two PaymentDetails objects
payment1 = PaymentDetails("PAY001", "Credit Card", 220.00, "Completed", 10.00)
payment2 = PaymentDetails("PAY002", "Debit Card", 90.00, "Processing", 5.00)

# Creating two DeliveryInformation objects
delivery1 = DeliveryInformation("DEL001", "REF12345", "2025-01-25", "Medium Box", 7.0, DeliveryStatus.SHIPPED)
delivery2 = DeliveryInformation("DEL002", "REF67890", "2025-01-28", "Small Box", 2.5, DeliveryStatus.ORDER_PLACED)

# Creating two Admin objects
admin1 = Admin("ADM001", "Khalid Alkaabi", "admin1@delivery.com", "Manager", "Full Access")
admin2 = Admin("ADM002", "Saeed Almansoori", "admin2@delivery.com", "Supervisor", "Limited Access")


# Printing Customer 1's details together
print("\n" + "-" * 50)
print("CUSTOMER 1: AHMED ALREMEITHI - ORDER DETAILS")
print("-" * 50)
print(customer1.displayCustomerInfo())
print(order1.displayOrderInfo())
print(payment1.displayPaymentInfo())
print(delivery1.displayDeliveryInfo())

# Printing Customer 2's details together
print("\n" + "-" * 50)
print("CUSTOMER 2: THANI ALREMEITHI - ORDER DETAILS")
print("-" * 50)
print(customer2.displayCustomerInfo())
print(order2.displayOrderInfo())
print(payment2.displayPaymentInfo())
print(delivery2.displayDeliveryInfo())

# Printing Admins separately for reference
print("\n" + "-" * 50)
print("ADMIN DETAILS")
print("-" * 50)
print(admin1.displayAdminInfo())
print(admin2.displayAdminInfo())